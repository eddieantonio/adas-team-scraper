#!/usr/bin/env python3
# -*- coding: UTF-8 -*-

"""
Parses an XML sitemap into Makefile rules.
"""

import sys
from urllib.parse import urlparse
from contextlib import redirect_stdout
from io import StringIO
from pathlib import Path

from lxml import etree

# Using values defined in sysexits.h:
# https://www.freebsd.org/cgi/man.cgi?query=sysexits&apropos=0&sektion=0&manpath=FreeBSD+4.3-RELEASE&format=html
EXIT_USAGE = 64
EXIT_DATAERR = 65

try:
    output_file = Path(sys.argv[1])
except IndexError:
    print("You forgot to suppy the output path!", file=sys.stderr)
    sys.exit(EXIT_USAGE)

try:
    tree = etree.parse('sitemap.xml')
except FileNotFoundError:
    print("sitemap.xml does not exist. Please download it first (use make!)",
          file=sys.stdout)
    sys.exit(EXIT_DATAERR)

# The root element.
urlset_elem = tree.getroot()

# We're going to capture ALL OF THE PRINTING in a variable, and write it out
# all at once "atomically", so that make(1) can have semantics that make
# sense.
output_accumulator = StringIO()
with redirect_stdout(output_accumulator):
    print("# Autogenerated file. DO NOT MODIFY")
    print()
    print("# Generic rule to download a file.")
    print("CURL.html = curl --fail $(CURLOPTIONS) -o $@")

    posts = set()

    # Iterate over each <url> element:
    for url_elem in urlset_elem.iter('{*}url'):
        # Get the text of the <loc> element within the <url>
        # This is the URL to the post.
        url = urlparse(url_elem.find('{*}loc').text)
        # I'm not expecting any of these:
        assert not url.query
        assert not url.params
        assert not url.fragment

        # Recombine the URL to "normalize" it.
        raw_url = url.geturl()

        # Break down a path like '/2018/06/13/grace-hopper-disclosure/'
        # into its components.
        try:
            year, month, day, title = url.path.strip('/').split('/')
        except ValueError:
            print(f'Skipping: {url.geturl()}. Not a post.', file=sys.stderr)
            continue

        # Jekyll wants posts in this format: YEAR-MONTH-DAY-title.MARKUP
        # See: https://jekyllrb.com/docs/posts/
        slug = '-'.join((year, month, day, title))
        # TODO: do something with posts that have <image:image> elements


        # Create the Makefile rule:
        target = f"_src/{slug}.html"
        recipe = f"$(CURL.html) {raw_url}"
        print(f"{target}:\n\t{recipe}")

        posts.add(target)

    # Create a 'phony' rule to download all the HTML.
    print("HTML = ", *posts)
    print(".PHONY: download-html")
    print("download-html: $(HTML)")

# Write all the accumlated output "atomically" in one go:
# (helps make(1) not use a half-written version of the file).
output_file.write_text(output_accumulator.getvalue(), encoding='UTF-8')
